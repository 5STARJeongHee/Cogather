<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<bean id="userAccessDenied" class="com.project.cogather.security.UserAccessDeniedHandler"/>
	<bean id="userLoginSuccess" class="com.project.cogather.security.UserLoginSuccessHandler"/>
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	
	<!-- 컨테이너의 HTTP security 요소 -->
	<security:http>
		<!-- 특정 url pattern 요청이 들어올때 인터셉터를 이용해 접근 제한 설정 -->
		<security:intercept-url pattern="/group/**" access="permitAll"/>
		<security:intercept-url pattern="/studycafe/**" access="permitAll"/>
		<security:intercept-url pattern="/roomoutOk/**" access="permitAll"/>
		
		<!-- /sample/member 요청은 ROLE_USER 라는 권한이 있는 사용자 만이 접근 가능 -->
		<security:intercept-url pattern="/cafemypage/*" access="hasRole('ROLE_USER')"/> 
		<security:intercept-url pattern="/studyroom" access="hasRole('ROLE_USER')"/> 
		<security:intercept-url pattern="/roomenterOk" access="hasRole('ROLE_USER')"/> 
		
		
		<!-- /sample/admin 요청은 ROLE_ADMIN 권한이 있는 사용자 만 접근 가능 -->
		<!--<security:intercept-url pattern="/home" access="hasRole('ROLE_ADMIN')"/>-->
	
		<!--  <security:form-login/> -->  <!-- 스프링 시큐리티에서 제공하는 기본 로그인 페이지 -->
		<security:form-login login-page="/login"
			authentication-success-handler-ref="userLoginSuccess"/>
		 
		<!-- <security:access-denied-handler error-page="/accessError"/>-->
		 <security:access-denied-handler ref="userAccessDenied"/>
		
		<!-- 로그아웃, 아래 url 로 POST requeszt 하면 로그아웃 처리된다. -->
		<security:logout logout-url="/logout" invalidate-session="true"/>
		
	</security:http>
	
	<!-- AuthenticationManager 빈 생성 -->
	<security:authentication-manager>
		<!-- UserDetailsService 사용한 인증과 권한처리 -->
		<security:authentication-provider>
		    <!-- InMemory 방식
			<security:user-service>
				<security:user name="user" password="{noop}user" authorities="ROLE_USER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_USER, ROLE_ADMIN"/>				
			</security:user-service>
			  -->
			 
			 <!-- JDBC 사용 -->
			 <security:jdbc-user-service data-source-ref="dataSource"
			users-by-username-query=
				"SELECT id username, pw password, enabled FROM members WHERE id = ?"
			authorities-by-username-query=
				"SELECT id username, auth authority FROM authority WHERE id = ?"
			 /> 
			 
			 <!-- PasswordEncoder 설정 -->
			 <!-- <security:password-encoder ref="customPasswordEncoder"/> -->
			 <security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
		
	</security:authentication-manager>
</beans>

